{
  "uid" : "5eb71a91cfbc5df",
  "name" : "test_get_token",
  "fullName" : "test_work.TestWework#test_get_token",
  "historyId" : "2d5d5ddc3b106d6f65b8345efc7f5775",
  "time" : {
    "start" : 1647495606507,
    "stop" : 1647495630998,
    "duration" : 24491
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.SSLError: HTTPSConnectionPool(host='qyapi.weixin.qq.com', port=443): Max retries exceeded with url: /cgi-bin/gettoken?corpid=ww5ef405b786c365b0&corpsecret=U4t2wWAHBwRA8xFqYKNCU54YhNDmMYU9pefjyhnI-DM (Caused by SSLError(SSLError(\"bad handshake: SysCallError(10054, 'WSAECONNRESET')\",),))",
  "statusTrace" : "self = <urllib3.contrib.pyopenssl.PyOpenSSLContext object at 0x000002A87E0F3E48>\nsock = <socket.socket fd=1088, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('192.168.31.254', 63586), raddr=('117.184.242.103', 443)>\nserver_side = False, do_handshake_on_connect = True, suppress_ragged_eofs = True\nserver_hostname = b'qyapi.weixin.qq.com'\n\n    def wrap_socket(self, sock, server_side=False,\n                    do_handshake_on_connect=True, suppress_ragged_eofs=True,\n                    server_hostname=None):\n        cnx = OpenSSL.SSL.Connection(self._ctx, sock)\n    \n        if isinstance(server_hostname, six.text_type):  # Platform-specific: Python 3\n            server_hostname = server_hostname.encode('utf-8')\n    \n        if server_hostname is not None:\n            cnx.set_tlsext_host_name(server_hostname)\n    \n        cnx.set_connect_state()\n    \n        while True:\n            try:\n>               cnx.do_handshake()\n\nd:\\tools\\python-3.6.0\\lib\\site-packages\\urllib3\\contrib\\pyopenssl.py:453: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <OpenSSL.SSL.Connection object at 0x000002A87E0F3F98>\n\n    def do_handshake(self):\n        \"\"\"\n        Perform an SSL handshake (usually called after :meth:`renegotiate` or\n        one of :meth:`set_accept_state` or :meth:`set_accept_state`). This can\n        raise the same exceptions as :meth:`send` and :meth:`recv`.\n    \n        :return: None.\n        \"\"\"\n        result = _lib.SSL_do_handshake(self._ssl)\n>       self._raise_ssl_error(self._ssl, result)\n\nd:\\tools\\python-3.6.0\\lib\\site-packages\\OpenSSL\\SSL.py:1907: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <OpenSSL.SSL.Connection object at 0x000002A87E0F3F98>\nssl = <cdata 'SSL *' 0x000002A87D444B40>, result = -1\n\n    def _raise_ssl_error(self, ssl, result):\n        if self._context._verify_helper is not None:\n            self._context._verify_helper.raise_if_problem()\n        if self._context._npn_advertise_helper is not None:\n            self._context._npn_advertise_helper.raise_if_problem()\n        if self._context._npn_select_helper is not None:\n            self._context._npn_select_helper.raise_if_problem()\n        if self._context._alpn_select_helper is not None:\n            self._context._alpn_select_helper.raise_if_problem()\n        if self._context._ocsp_helper is not None:\n            self._context._ocsp_helper.raise_if_problem()\n    \n        error = _lib.SSL_get_error(ssl, result)\n        if error == _lib.SSL_ERROR_WANT_READ:\n            raise WantReadError()\n        elif error == _lib.SSL_ERROR_WANT_WRITE:\n            raise WantWriteError()\n        elif error == _lib.SSL_ERROR_ZERO_RETURN:\n            raise ZeroReturnError()\n        elif error == _lib.SSL_ERROR_WANT_X509_LOOKUP:\n            # TODO: This is untested.\n            raise WantX509LookupError()\n        elif error == _lib.SSL_ERROR_SYSCALL:\n            if _lib.ERR_peek_error() == 0:\n                if result < 0:\n                    if platform == \"win32\":\n                        errno = _ffi.getwinerror()[0]\n                    else:\n                        errno = _ffi.errno\n    \n                    if errno != 0:\n>                       raise SysCallError(errno, errorcode.get(errno))\nE                       OpenSSL.SSL.SysCallError: (10054, 'WSAECONNRESET')\n\nd:\\tools\\python-3.6.0\\lib\\site-packages\\OpenSSL\\SSL.py:1631: SysCallError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002A87E0F36A0>\nmethod = 'GET'\nurl = '/cgi-bin/gettoken?corpid=ww5ef405b786c365b0&corpsecret=U4t2wWAHBwRA8xFqYKNCU54YhNDmMYU9pefjyhnI-DM'\nbody = None\nheaders = {'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\nredirect = False, assert_same_host = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002A87A242470>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002A87C27E2B0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n        Get a connection from the pool and perform an HTTP request. This is the\n        lowest level call for making a request, so you'll need to specify all\n        the raw details.\n    \n        .. note::\n    \n           More commonly, it's appropriate to use a convenience method provided\n           by :class:`.RequestMethods`, such as :meth:`request`.\n    \n        .. note::\n    \n           `release_conn` will only behave as expected if\n           `preload_content=False` because we want to make\n           `preload_content=False` the default behaviour someday soon without\n           breaking backwards compatibility.\n    \n        :param method:\n            HTTP request method (such as GET, POST, PUT, etc.)\n    \n        :param body:\n            Data to send in the request body (useful for creating\n            POST requests, see HTTPConnectionPool.post_url for\n            more convenience).\n    \n        :param headers:\n            Dictionary of custom headers to send, such as User-Agent,\n            If-None-Match, etc. If None, pool headers are used. If provided,\n            these headers completely replace any pool-specific headers.\n    \n        :param retries:\n            Configure the number of retries to allow before raising a\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n            Pass ``None`` to retry until you receive a response. Pass a\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n            over different types of retries.\n            Pass an integer number to retry connection errors that many times,\n            but no other types of errors. Pass zero to never retry.\n    \n            If ``False``, then retries are disabled and any exception is raised\n            immediately. Also, instead of raising a MaxRetryError on redirects,\n            the redirect response will be returned.\n    \n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n        :param redirect:\n            If True, automatically handle redirects (status codes 301, 302,\n            303, 307, 308). Each redirect counts as a retry. Disabling retries\n            will disable redirect, too.\n    \n        :param assert_same_host:\n            If ``True``, will make sure that the host of the pool requests is\n            consistent else will raise HostChangedError. When False, you can\n            use the pool on an HTTP proxy and request foreign hosts.\n    \n        :param timeout:\n            If specified, overrides the default timeout for this one\n            request. It may be a float (in seconds) or an instance of\n            :class:`urllib3.util.Timeout`.\n    \n        :param pool_timeout:\n            If set and the pool is set to block=True, then this method will\n            block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n            connection is available within the time period.\n    \n        :param release_conn:\n            If False, then the urlopen call will not release the connection\n            back into the pool once a response is received (but will release if\n            you read the entire contents of the response such as when\n            `preload_content=True`). This is useful if you're not preloading\n            the response's content immediately. You will need to call\n            ``r.release_conn()`` on the response ``r`` to return the connection\n            back into the pool. If None, it takes the value of\n            ``response_kw.get('preload_content', True)``.\n    \n        :param chunked:\n            If True, urllib3 will send the body using chunked transfer\n            encoding. Otherwise, urllib3 will send the body using the standard\n            content-length form. Defaults to False.\n    \n        :param int body_pos:\n            Position to seek to in file-like body in the event of a retry or\n            redirect. Typically this won't need to be set because urllib3 will\n            auto-populate the value when needed.\n    \n        :param \\\\**response_kw:\n            Additional parameters are passed to\n            :meth:`urllib3.response.HTTPResponse.from_httplib`\n        \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n>                                                 chunked=chunked)\n\nd:\\tools\\python-3.6.0\\lib\\site-packages\\urllib3\\connectionpool.py:600: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002A87E0F36A0>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002A87E0F3DD8>\nmethod = 'GET'\nurl = '/cgi-bin/gettoken?corpid=ww5ef405b786c365b0&corpsecret=U4t2wWAHBwRA8xFqYKNCU54YhNDmMYU9pefjyhnI-DM'\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002A87C27E2B0>\nchunked = False\nhttplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002A87E0F3E10>\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n                      **httplib_request_kw):\n        \"\"\"\n        Perform a request on a given urllib connection object taken from our\n        pool.\n    \n        :param conn:\n            a connection from one of our connection pools\n    \n        :param timeout:\n            Socket timeout in seconds for the request. This can be a\n            float or integer, which will set the same timeout value for\n            the socket connect and the socket read, or an instance of\n            :class:`urllib3.util.Timeout`, which gives you more fine-grained\n            control over your timeouts.\n        \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n>           self._validate_conn(conn)\n\nd:\\tools\\python-3.6.0\\lib\\site-packages\\urllib3\\connectionpool.py:343: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002A87E0F36A0>\nconn = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002A87E0F3DD8>\n\n    def _validate_conn(self, conn):\n        \"\"\"\n        Called right before a request is made, after the socket is created.\n        \"\"\"\n        super(HTTPSConnectionPool, self)._validate_conn(conn)\n    \n        # Force connect early to allow us to validate the connection.\n        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n>           conn.connect()\n\nd:\\tools\\python-3.6.0\\lib\\site-packages\\urllib3\\connectionpool.py:839: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connection.VerifiedHTTPSConnection object at 0x000002A87E0F3DD8>\n\n    def connect(self):\n        # Add certificate verification\n        conn = self._new_conn()\n        hostname = self.host\n    \n        if self._tunnel_host:\n            self.sock = conn\n            # Calls self._set_hostport(), so self.host is\n            # self._tunnel_host below.\n            self._tunnel()\n            # Mark this connection as not reusable\n            self.auto_open = 0\n    \n            # Override the host with the one we're requesting data from.\n            hostname = self._tunnel_host\n    \n        server_hostname = hostname\n        if self.server_hostname is not None:\n            server_hostname = self.server_hostname\n    \n        is_time_off = datetime.date.today() < RECENT_DATE\n        if is_time_off:\n            warnings.warn((\n                'System time is way off (before {0}). This will probably '\n                'lead to SSL verification errors').format(RECENT_DATE),\n                SystemTimeWarning\n            )\n    \n        # Wrap socket using verification with the root certs in\n        # trusted_root_certs\n        if self.ssl_context is None:\n            self.ssl_context = create_urllib3_context(\n                ssl_version=resolve_ssl_version(self.ssl_version),\n                cert_reqs=resolve_cert_reqs(self.cert_reqs),\n            )\n    \n        context = self.ssl_context\n        context.verify_mode = resolve_cert_reqs(self.cert_reqs)\n        self.sock = ssl_wrap_socket(\n            sock=conn,\n            keyfile=self.key_file,\n            certfile=self.cert_file,\n            ca_certs=self.ca_certs,\n            ca_cert_dir=self.ca_cert_dir,\n            server_hostname=server_hostname,\n>           ssl_context=context)\n\nd:\\tools\\python-3.6.0\\lib\\site-packages\\urllib3\\connection.py:344: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsock = <socket.socket fd=1088, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('192.168.31.254', 63586), raddr=('117.184.242.103', 443)>\nkeyfile = None, certfile = None, cert_reqs = None\nca_certs = 'd:\\\\tools\\\\python-3.6.0\\\\lib\\\\site-packages\\\\certifi\\\\cacert.pem'\nserver_hostname = 'qyapi.weixin.qq.com', ssl_version = None, ciphers = None\nssl_context = <urllib3.contrib.pyopenssl.PyOpenSSLContext object at 0x000002A87E0F3E48>\nca_cert_dir = None\n\n    def ssl_wrap_socket(sock, keyfile=None, certfile=None, cert_reqs=None,\n                        ca_certs=None, server_hostname=None,\n                        ssl_version=None, ciphers=None, ssl_context=None,\n                        ca_cert_dir=None):\n        \"\"\"\n        All arguments except for server_hostname, ssl_context, and ca_cert_dir have\n        the same meaning as they do when using :func:`ssl.wrap_socket`.\n    \n        :param server_hostname:\n            When SNI is supported, the expected hostname of the certificate\n        :param ssl_context:\n            A pre-made :class:`SSLContext` object. If none is provided, one will\n            be created using :func:`create_urllib3_context`.\n        :param ciphers:\n            A string of ciphers we wish the client to support.\n        :param ca_cert_dir:\n            A directory containing CA certificates in multiple separate files, as\n            supported by OpenSSL's -CApath flag or the capath argument to\n            SSLContext.load_verify_locations().\n        \"\"\"\n        context = ssl_context\n        if context is None:\n            # Note: This branch of code and all the variables in it are no longer\n            # used by urllib3 itself. We should consider deprecating and removing\n            # this code.\n            context = create_urllib3_context(ssl_version, cert_reqs,\n                                             ciphers=ciphers)\n    \n        if ca_certs or ca_cert_dir:\n            try:\n                context.load_verify_locations(ca_certs, ca_cert_dir)\n            except IOError as e:  # Platform-specific: Python 2.7\n                raise SSLError(e)\n            # Py33 raises FileNotFoundError which subclasses OSError\n            # These are not equivalent unless we check the errno attribute\n            except OSError as e:  # Platform-specific: Python 3.3 and beyond\n                if e.errno == errno.ENOENT:\n                    raise SSLError(e)\n                raise\n        elif getattr(context, 'load_default_certs', None) is not None:\n            # try to load OS default certs; works well on Windows (require Python3.4+)\n            context.load_default_certs()\n    \n        if certfile:\n            context.load_cert_chain(certfile, keyfile)\n    \n        # If we detect server_hostname is an IP address then the SNI\n        # extension should not be used according to RFC3546 Section 3.1\n        # We shouldn't warn the user if SNI isn't available but we would\n        # not be using SNI anyways due to IP address for server_hostname.\n        if ((server_hostname is not None and not is_ipaddress(server_hostname))\n                or IS_SECURETRANSPORT):\n            if HAS_SNI and server_hostname is not None:\n>               return context.wrap_socket(sock, server_hostname=server_hostname)\n\nd:\\tools\\python-3.6.0\\lib\\site-packages\\urllib3\\util\\ssl_.py:344: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.contrib.pyopenssl.PyOpenSSLContext object at 0x000002A87E0F3E48>\nsock = <socket.socket fd=1088, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('192.168.31.254', 63586), raddr=('117.184.242.103', 443)>\nserver_side = False, do_handshake_on_connect = True, suppress_ragged_eofs = True\nserver_hostname = b'qyapi.weixin.qq.com'\n\n    def wrap_socket(self, sock, server_side=False,\n                    do_handshake_on_connect=True, suppress_ragged_eofs=True,\n                    server_hostname=None):\n        cnx = OpenSSL.SSL.Connection(self._ctx, sock)\n    \n        if isinstance(server_hostname, six.text_type):  # Platform-specific: Python 3\n            server_hostname = server_hostname.encode('utf-8')\n    \n        if server_hostname is not None:\n            cnx.set_tlsext_host_name(server_hostname)\n    \n        cnx.set_connect_state()\n    \n        while True:\n            try:\n                cnx.do_handshake()\n            except OpenSSL.SSL.WantReadError:\n                if not util.wait_for_read(sock, sock.gettimeout()):\n                    raise timeout('select timed out')\n                continue\n            except OpenSSL.SSL.Error as e:\n>               raise ssl.SSLError('bad handshake: %r' % e)\nE               ssl.SSLError: (\"bad handshake: SysCallError(10054, 'WSAECONNRESET')\",)\n\nd:\\tools\\python-3.6.0\\lib\\site-packages\\urllib3\\contrib\\pyopenssl.py:459: SSLError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000002A87E0F34A8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002A87A242470>\nverify = True, cert = None, proxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n        :param stream: (optional) Whether to stream the request content.\n        :param timeout: (optional) How long to wait for the server to send\n            data before giving up, as a float, or a :ref:`(connect timeout,\n            read timeout) <timeouts>` tuple.\n        :type timeout: float or tuple or urllib3 Timeout object\n        :param verify: (optional) Either a boolean, in which case it controls whether\n            we verify the server's TLS certificate, or a string, in which case it\n            must be a path to a CA bundle to use\n        :param cert: (optional) Any user-provided SSL certificate to be trusted.\n        :param proxies: (optional) The proxies dictionary to apply to the request.\n        :rtype: requests.Response\n        \"\"\"\n    \n        try:\n            conn = self.get_connection(request.url, proxies)\n        except LocationValueError as e:\n            raise InvalidURL(e, request=request)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nd:\\tools\\python-3.6.0\\lib\\site-packages\\requests\\adapters.py:449: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002A87E0F36A0>\nmethod = 'GET'\nurl = '/cgi-bin/gettoken?corpid=ww5ef405b786c365b0&corpsecret=U4t2wWAHBwRA8xFqYKNCU54YhNDmMYU9pefjyhnI-DM'\nbody = None\nheaders = {'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\nredirect = False, assert_same_host = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002A87A242470>\npool_timeout = None, release_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}, conn = None\nrelease_this_conn = True, err = None, clean_exit = False\ntimeout_obj = <urllib3.util.timeout.Timeout object at 0x000002A87C27E2B0>\nis_new_proxy_conn = False\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, chunked=False,\n                body_pos=None, **response_kw):\n        \"\"\"\n        Get a connection from the pool and perform an HTTP request. This is the\n        lowest level call for making a request, so you'll need to specify all\n        the raw details.\n    \n        .. note::\n    \n           More commonly, it's appropriate to use a convenience method provided\n           by :class:`.RequestMethods`, such as :meth:`request`.\n    \n        .. note::\n    \n           `release_conn` will only behave as expected if\n           `preload_content=False` because we want to make\n           `preload_content=False` the default behaviour someday soon without\n           breaking backwards compatibility.\n    \n        :param method:\n            HTTP request method (such as GET, POST, PUT, etc.)\n    \n        :param body:\n            Data to send in the request body (useful for creating\n            POST requests, see HTTPConnectionPool.post_url for\n            more convenience).\n    \n        :param headers:\n            Dictionary of custom headers to send, such as User-Agent,\n            If-None-Match, etc. If None, pool headers are used. If provided,\n            these headers completely replace any pool-specific headers.\n    \n        :param retries:\n            Configure the number of retries to allow before raising a\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n            Pass ``None`` to retry until you receive a response. Pass a\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n            over different types of retries.\n            Pass an integer number to retry connection errors that many times,\n            but no other types of errors. Pass zero to never retry.\n    \n            If ``False``, then retries are disabled and any exception is raised\n            immediately. Also, instead of raising a MaxRetryError on redirects,\n            the redirect response will be returned.\n    \n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n        :param redirect:\n            If True, automatically handle redirects (status codes 301, 302,\n            303, 307, 308). Each redirect counts as a retry. Disabling retries\n            will disable redirect, too.\n    \n        :param assert_same_host:\n            If ``True``, will make sure that the host of the pool requests is\n            consistent else will raise HostChangedError. When False, you can\n            use the pool on an HTTP proxy and request foreign hosts.\n    \n        :param timeout:\n            If specified, overrides the default timeout for this one\n            request. It may be a float (in seconds) or an instance of\n            :class:`urllib3.util.Timeout`.\n    \n        :param pool_timeout:\n            If set and the pool is set to block=True, then this method will\n            block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n            connection is available within the time period.\n    \n        :param release_conn:\n            If False, then the urlopen call will not release the connection\n            back into the pool once a response is received (but will release if\n            you read the entire contents of the response such as when\n            `preload_content=True`). This is useful if you're not preloading\n            the response's content immediately. You will need to call\n            ``r.release_conn()`` on the response ``r`` to return the connection\n            back into the pool. If None, it takes the value of\n            ``response_kw.get('preload_content', True)``.\n    \n        :param chunked:\n            If True, urllib3 will send the body using chunked transfer\n            encoding. Otherwise, urllib3 will send the body using the standard\n            content-length form. Defaults to False.\n    \n        :param int body_pos:\n            Position to seek to in file-like body in the event of a retry or\n            redirect. Typically this won't need to be set because urllib3 will\n            auto-populate the value when needed.\n    \n        :param \\\\**response_kw:\n            Additional parameters are passed to\n            :meth:`urllib3.response.HTTPResponse.from_httplib`\n        \"\"\"\n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get('preload_content', True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/shazow/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n        # headers dict so we can safely change it without those changes being\n        # reflected in anyone else's copy.\n        if self.scheme == 'http':\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n            if is_new_proxy_conn:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(conn, method, url,\n                                                  timeout=timeout_obj,\n                                                  body=body, headers=headers,\n                                                  chunked=chunked)\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw['request_method'] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(httplib_response,\n                                                     pool=self,\n                                                     connection=response_conn,\n                                                     retries=retries,\n                                                     **response_kw)\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except queue.Empty:\n            # Timed out by queue.\n            raise EmptyPoolError(self, \"No pool connections are available.\")\n    \n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n    \n            retries = retries.increment(method, url, error=e, _pool=self,\n>                                       _stacktrace=sys.exc_info()[2])\n\nd:\\tools\\python-3.6.0\\lib\\site-packages\\urllib3\\connectionpool.py:638: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None)\nmethod = 'GET'\nurl = '/cgi-bin/gettoken?corpid=ww5ef405b786c365b0&corpsecret=U4t2wWAHBwRA8xFqYKNCU54YhNDmMYU9pefjyhnI-DM'\nresponse = None\nerror = SSLError(SSLError(\"bad handshake: SysCallError(10054, 'WSAECONNRESET')\",),)\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000002A87E0F36A0>\n_stacktrace = <traceback object at 0x000002A87E116A48>\n\n    def increment(self, method=None, url=None, response=None, error=None,\n                  _pool=None, _stacktrace=None):\n        \"\"\" Return a new Retry object with incremented retry counters.\n    \n        :param response: A response object, or None, if the server did not\n            return a response.\n        :type response: :class:`~urllib3.response.HTTPResponse`\n        :param Exception error: An error encountered during the request, or\n            None if the response was received successfully.\n    \n        :return: A new ``Retry`` object.\n        \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        cause = 'unknown'\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = 'too many redirects'\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and a the given method is in the whitelist\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(\n                    status_code=response.status)\n                status = response.status\n    \n        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect, read=read, redirect=redirect, status=status_count,\n            history=history)\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='qyapi.weixin.qq.com', port=443): Max retries exceeded with url: /cgi-bin/gettoken?corpid=ww5ef405b786c365b0&corpsecret=U4t2wWAHBwRA8xFqYKNCU54YhNDmMYU9pefjyhnI-DM (Caused by SSLError(SSLError(\"bad handshake: SysCallError(10054, 'WSAECONNRESET')\",),))\n\nd:\\tools\\python-3.6.0\\lib\\site-packages\\urllib3\\util\\retry.py:398: MaxRetryError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <WechatAPI.testcase.test_work.TestWework object at 0x000002A87E0F30F0>\n\n    def test_get_token(self):\n>       print(Wework().test_get_member(\"138550817\"))\n\ntest_work.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\api\\we_work.py:24: in __init__\n    self.token = Util().token() #不要忘了Util的()\n..\\api\\util.py:27: in token\n    r = requests.get(s,params=param)\nd:\\tools\\python-3.6.0\\lib\\site-packages\\requests\\api.py:75: in get\n    return request('get', url, params=params, **kwargs)\nd:\\tools\\python-3.6.0\\lib\\site-packages\\requests\\api.py:60: in request\n    return session.request(method=method, url=url, **kwargs)\nd:\\tools\\python-3.6.0\\lib\\site-packages\\requests\\sessions.py:533: in request\n    resp = self.send(prep, **send_kwargs)\nd:\\tools\\python-3.6.0\\lib\\site-packages\\requests\\sessions.py:646: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <requests.adapters.HTTPAdapter object at 0x000002A87E0F34A8>\nrequest = <PreparedRequest [GET]>, stream = False\ntimeout = <urllib3.util.timeout.Timeout object at 0x000002A87A242470>\nverify = True, cert = None, proxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n        :param stream: (optional) Whether to stream the request content.\n        :param timeout: (optional) How long to wait for the server to send\n            data before giving up, as a float, or a :ref:`(connect timeout,\n            read timeout) <timeouts>` tuple.\n        :type timeout: float or tuple or urllib3 Timeout object\n        :param verify: (optional) Either a boolean, in which case it controls whether\n            we verify the server's TLS certificate, or a string, in which case it\n            must be a path to a CA bundle to use\n        :param cert: (optional) Any user-provided SSL certificate to be trusted.\n        :param proxies: (optional) The proxies dictionary to apply to the request.\n        :rtype: requests.Response\n        \"\"\"\n    \n        try:\n            conn = self.get_connection(request.url, proxies)\n        except LocationValueError as e:\n            raise InvalidURL(e, request=request)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7, use buffering of HTTP responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 3.3+\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n            raise ConnectionError(err, request=request)\n    \n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n    \n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n    \n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n    \n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n>               raise SSLError(e, request=request)\nE               requests.exceptions.SSLError: HTTPSConnectionPool(host='qyapi.weixin.qq.com', port=443): Max retries exceeded with url: /cgi-bin/gettoken?corpid=ww5ef405b786c365b0&corpsecret=U4t2wWAHBwRA8xFqYKNCU54YhNDmMYU9pefjyhnI-DM (Caused by SSLError(SSLError(\"bad handshake: SysCallError(10054, 'WSAECONNRESET')\",),))\n\nd:\\tools\\python-3.6.0\\lib\\site-packages\\requests\\adapters.py:514: SSLError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "__pytest_repeat_step_number",
    "time" : {
      "start" : 1647495606507,
      "stop" : 1647495606507,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "suite",
    "value" : "test_work"
  }, {
    "name" : "subSuite",
    "value" : "TestWework"
  }, {
    "name" : "host",
    "value" : "ZXJ"
  }, {
    "name" : "thread",
    "value" : "57800-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_work"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "5eb71a91cfbc5df.json",
  "parameterValues" : [ ]
}